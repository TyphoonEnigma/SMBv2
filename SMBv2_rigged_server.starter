Below is one way to adapt the skeleton SMBv2 server so that it can run commands on the server based on a new custom SMB2 “Remote Exec” command. This is obviously highly insecure in real deployments and is shown only for educational purposes (to illustrate how one might define and implement a new, non-standard SMB2 command).

	Security Warning:
		1.	Allowing remote command execution via a file-sharing protocol is extremely dangerous and exposes you to RCE (Remote Code Execution) attacks.
	2.	For real production, you would never accept arbitrary commands and just hand them to system()! You would also enforce authentication, proper permissions, sandboxing, auditing, and more.

That being said, here is a full example code—with changes highlighted—that includes:
	•	A new command code SMB2_REMOTE_EXEC (completely non-standard).
	•	New request and response structs for the “remote exec” functionality.
	•	A handler (handleRemoteExec) that runs the received command via popen() and returns its stdout back to the client.
	•	Basic size checks to avoid trivial buffer overflows.

/***************************************************
* File: improved_smb2_server.c
*
* A more realistic (but still incomplete) SMB2 server
* skeleton, now with a custom "Remote Exec" command.
*
* WARNING: Running arbitrary commands is insecure.
* This example is purely educational. Do NOT deploy
* in production.
*
* COMPILATION (Linux example):
*   gcc -o improved_smb2_server improved_smb2_server.c
*
* RUN:
*   ./improved_smb2_server <port>
***************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <stdint.h>
#include <errno.h>
#include <time.h>

#pragma pack(push, 1)

//--------------------------------------------------
//                  SMB2 Header
//--------------------------------------------------
typedef struct _SMB2Header {
    unsigned char  ProtocolId[4];  // 0xFE 'S' 'M' 'B'
    uint16_t       StructureSize;  // Always 64 for SMB2
    uint16_t       CreditCharge;   // Credits requested/charged
    uint32_t       Status;         // For responses, server sets status
    uint16_t       Command;        // SMB2 command code
    uint16_t       Credits;        // Credits granted/requested
    uint32_t       Flags;          // SMB2 header flags
    uint32_t       NextCommand;    // Offset to next command in compound
    uint64_t       MessageId;      // Unique message ID
    uint32_t       Reserved;       // Usually 0
    uint32_t       TreeId;         // Tree ID
    uint64_t       SessionId;      // Session ID
    unsigned char  Signature[16];  // For signing
} SMB2Header;

//--------------------------------------------------
//              Standard SMB2 Commands
//--------------------------------------------------
#define SMB2_NEGOTIATE       0x0000
#define SMB2_SESSION_SETUP   0x0001
#define SMB2_TREE_CONNECT    0x0003
#define SMB2_CREATE          0x0005
#define SMB2_READ            0x0008
#define SMB2_WRITE           0x0009
// ... more commands if needed

//--------------------------------------------------
//             Custom "Remote Exec" Command
//--------------------------------------------------
#define SMB2_REMOTE_EXEC     0x9999  // Arbitrary non-standard command code

//--------------------------------------------------
//               Some SMB2 Status Codes
//--------------------------------------------------
#define STATUS_SUCCESS                0x00000000
#define STATUS_INVALID_PARAMETER      0xC000000D
#define STATUS_INVALID_DEVICE_REQUEST 0xC0000010
#define STATUS_NOT_SUPPORTED          0xC00000BB

//--------------------------------------------------
//                   SMB2 Dialects
//--------------------------------------------------
#define SMB2_DIALECT_0202    0x0202
#define SMB2_DIALECT_0210    0x0210
#define SMB2_DIALECT_0300    0x0300

//--------------------------------------------------
//            New "Remote Exec" Structures
//--------------------------------------------------
// Minimal request structure for our custom command
typedef struct _SMB2RemoteExecRequest {
    uint16_t StructureSize;   // arbitrary, define as 8 for example
    uint16_t Reserved;
    uint32_t CommandLength;   // length of the command string to follow
    // Followed by the UTF-8/ASCII command string in the payload
} SMB2RemoteExecRequest;

// Minimal response structure for our custom command
typedef struct _SMB2RemoteExecResponse {
    uint16_t StructureSize;   // arbitrary, define as 4 for example
    uint16_t Reserved;
    uint32_t OutputLength;    // length of the command output
    // Followed by the output data (stdout) from the command
} SMB2RemoteExecResponse;

//--------------------------------------------------
//                Other SMB2 Structures
//--------------------------------------------------

// For a minimal NegotiateRequest (cmd=0x0000)
typedef struct _SMB2NegotiateRequest {
    uint16_t StructureSize;  // Must be 36
    uint16_t DialectCount;
    uint16_t SecurityMode;
    uint16_t Reserved;
    uint32_t Capabilities;
    uint64_t ClientGuid;     // Usually 16 bytes in real spec, simplified here
    uint32_t NegotiateContextOffset; // SMB 3.x can have negotiate contexts
    uint16_t NegotiateContextCount;
    uint16_t Reserved2;
    // Then come dialects in an array
} SMB2NegotiateRequest;

// Minimal NegotiateResponse (cmd=0x0000)
typedef struct _SMB2NegotiateResponse {
    uint16_t StructureSize; // Must be 65 in real SMB2
    uint16_t SecurityMode;
    uint16_t DialectRevision;
    uint16_t NegotiateContextCount;
    uint32_t ServerGuid;    // Real SMB2 uses 16 bytes; simplified
    uint32_t Capabilities;
    uint32_t MaxTransSize;
    uint32_t MaxReadSize;
    uint32_t MaxWriteSize;
    uint64_t SystemTime;    // Simplified
    uint64_t ServerStartTime;
    // Followed by security buffer, etc. (omitted)
} SMB2NegotiateResponse;

// Minimal SessionSetupRequest (cmd=0x0001)
typedef struct _SMB2SessionSetupRequest {
    uint16_t StructureSize;  // Must be 25
    uint8_t  Flags;
    uint8_t  SecurityMode;
    uint32_t Capabilities;
    uint32_t Channel;
    uint16_t SecurityBufferOffset;
    uint16_t SecurityBufferLength;
    // Then the security buffer data
} SMB2SessionSetupRequest;

// Minimal SessionSetupResponse (cmd=0x0001)
typedef struct _SMB2SessionSetupResponse {
    uint16_t StructureSize; // Must be 9
    uint16_t SessionFlags;
    uint16_t SecurityBufferOffset;
    uint16_t SecurityBufferLength;
    // Then security buffer data if needed
} SMB2SessionSetupResponse;

// Minimal TreeConnectRequest (cmd=0x0003)
typedef struct _SMB2TreeConnectRequest {
    uint16_t StructureSize;  // Must be 9
    uint16_t Reserved;
    uint32_t PathOffset;
    uint32_t PathLength;
    // Path (e.g. "\\server\share")
} SMB2TreeConnectRequest;

// Minimal TreeConnectResponse (cmd=0x0003)
typedef struct _SMB2TreeConnectResponse {
    uint16_t StructureSize; // Must be 16
    uint8_t  ShareType;
    uint8_t  Reserved;
    uint32_t ShareFlags;
    uint32_t Capabilities;
    uint32_t MaximalAccess;
} SMB2TreeConnectResponse;

#pragma pack(pop)

//--------------------------------------------------
//         Global Variables / Fake Session
//--------------------------------------------------
static uint64_t gFakeSessionId = 0x1122334455667788;
static uint16_t gServerCredits = 128;  // minimal "credit" system

//--------------------------------------------------
//   Utility: Send an SMB2 header + optional payload
//--------------------------------------------------
int sendSMB2Response(int sock, SMB2Header *resp, const void *payload, size_t payloadLen) {
    // First, send the header
    ssize_t sent = send(sock, resp, sizeof(*resp), 0);
    if (sent < 0) {
        perror("send header");
        return -1;
    }
    // Then payload
    if (payload && payloadLen > 0) {
        sent = send(sock, payload, payloadLen, 0);
        if (sent < 0) {
            perror("send payload");
            return -1;
        }
    }
    return 0;
}

//--------------------------------------------------
//        Build a base SMB2 response header
//--------------------------------------------------
void buildSMB2ResponseHeader(const SMB2Header *req, SMB2Header *resp) {
    memset(resp, 0, sizeof(*resp));
    resp->ProtocolId[0] = 0xFE;
    resp->ProtocolId[1] = 'S';
    resp->ProtocolId[2] = 'M';
    resp->ProtocolId[3] = 'B';
    resp->StructureSize = 64;
    resp->Command       = req->Command;       // same command
    resp->MessageId     = req->MessageId;     // mirror client’s messageId
    resp->TreeId        = req->TreeId;        // echo back
    resp->SessionId     = req->SessionId;     // echo back

    // We might want to grant or update credits
    // For simplicity: always give "1" credit back
    resp->Credits = 1;  
}

//--------------------------------------------------
//            Handle NEGOTIATE (cmd=0x0000)
//--------------------------------------------------
int handleNegotiate(int sock, SMB2Header *reqHeader, char *payload, int payloadLen) {
    if (payloadLen < (int)sizeof(SMB2NegotiateRequest)) {
        fprintf(stderr, "[Server] NEGOTIATE request too short\n");
        return -1;
    }
    SMB2NegotiateRequest *negReq = (SMB2NegotiateRequest*)payload;
    uint16_t dialectCount = negReq->DialectCount;
    // Validate
    if (dialectCount * 2 > (uint16_t)(payloadLen - sizeof(SMB2NegotiateRequest))) {
        fprintf(stderr, "[Server] NEGOTIATE invalid dialect count\n");
        return -1;
    }
    // Dialects start right after the request struct
    uint16_t *dialects = (uint16_t *)(payload + sizeof(SMB2NegotiateRequest));

    printf("[Server] Client proposes %u dialects\n", dialectCount);
    uint16_t chosenDialect = 0;

    // A simple approach: pick the highest we see that we support
    for (int i = 0; i < dialectCount; i++) {
        uint16_t d = dialects[i];
        if (d == SMB2_DIALECT_0300) {
            chosenDialect = SMB2_DIALECT_0300;
            break;
        } else if (d == SMB2_DIALECT_0210) {
            chosenDialect = SMB2_DIALECT_0210;
            // keep looking in case there's 0x0300
        } else if (d == SMB2_DIALECT_0202 && chosenDialect == 0) {
            chosenDialect = SMB2_DIALECT_0202;
        }
    }
    if (!chosenDialect) {
        printf("[Server] No supported dialect found!\n");
        // For demonstration, we’ll still respond but with NOT_SUPPORTED
        SMB2Header respHdr;
        buildSMB2ResponseHeader(reqHeader, &respHdr);
        respHdr.Status = STATUS_NOT_SUPPORTED;
        sendSMB2Response(sock, &respHdr, NULL, 0);
        return 0;
    } else {
        printf("[Server] Negotiated dialect: 0x%04X\n", chosenDialect);
    }

    // Build response
    SMB2Header respHdr;
    buildSMB2ResponseHeader(reqHeader, &respHdr);
    respHdr.Status = STATUS_SUCCESS;

    SMB2NegotiateResponse negResp;
    memset(&negResp, 0, sizeof(negResp));
    negResp.StructureSize = 65;  // per SMB spec
    negResp.SecurityMode   = 0;  // no signing for now
    negResp.DialectRevision = chosenDialect;
    negResp.NegotiateContextCount = 0;
    negResp.ServerGuid = 0xDEADBEEF; // placeholder
    negResp.Capabilities = 0;
    negResp.MaxTransSize = 0x100000; // 1 MB
    negResp.MaxReadSize  = 0x100000; // 1 MB
    negResp.MaxWriteSize = 0x100000; // 1 MB
    negResp.SystemTime   = (uint64_t)time(NULL);
    negResp.ServerStartTime = (uint64_t)time(NULL) - 1000;

    if (sendSMB2Response(sock, &respHdr, &negResp, sizeof(negResp)) < 0) {
        return -1;
    }
    return 0;
}

//--------------------------------------------------
//         Handle SESSION_SETUP (cmd=0x0001)
//--------------------------------------------------
int handleSessionSetup(int sock, SMB2Header *reqHeader, char *payload, int payloadLen) {
    if (payloadLen < (int)sizeof(SMB2SessionSetupRequest)) {
        fprintf(stderr, "[Server] SESSION_SETUP request too short\n");
        return -1;
    }
    // We won't do real auth. Let's just "accept" the session.
    printf("[Server] SessionSetup: ignoring real auth, granting session=0x%llx\n",
           (unsigned long long)gFakeSessionId);

    SMB2Header respHdr;
    buildSMB2ResponseHeader(reqHeader, &respHdr);
    respHdr.Status    = STATUS_SUCCESS;
    // Assign our fake session ID
    respHdr.SessionId = gFakeSessionId;

    SMB2SessionSetupResponse ssresp;
    memset(&ssresp, 0, sizeof(ssresp));
    ssresp.StructureSize = 9; // per spec
    ssresp.SessionFlags  = 0; 

    if (sendSMB2Response(sock, &respHdr, &ssresp, sizeof(ssresp)) < 0) {
        return -1;
    }
    return 0;
}

//--------------------------------------------------
//          Handle TREE_CONNECT (cmd=0x0003)
//--------------------------------------------------
int handleTreeConnect(int sock, SMB2Header *reqHeader, char *payload, int payloadLen) {
    if (payloadLen < (int)sizeof(SMB2TreeConnectRequest)) {
        fprintf(stderr, "[Server] TREE_CONNECT request too short\n");
        return -1;
    }
    // A real server would parse the UNC path. We'll skip that here.

    SMB2Header respHdr;
    buildSMB2ResponseHeader(reqHeader, &respHdr);
    respHdr.Status = STATUS_SUCCESS;
    // Assign a fake TreeId
    respHdr.TreeId = 0xABABABAB; 

    SMB2TreeConnectResponse tcresp;
    memset(&tcresp, 0, sizeof(tcresp));
    tcresp.StructureSize  = 16;
    tcresp.ShareType      = 0x01;  // DISK share
    tcresp.ShareFlags     = 0;
    tcresp.Capabilities   = 0;
    tcresp.MaximalAccess  = 0x001F01FF; // pretend full access

    if (sendSMB2Response(sock, &respHdr, &tcresp, sizeof(tcresp)) < 0) {
        return -1;
    }
    return 0;
}

//--------------------------------------------------
//             Handle CREATE (cmd=0x0005)
//--------------------------------------------------
int handleCreate(int sock, SMB2Header *reqHeader, char *payload, int payloadLen) {
    printf("[Server] CREATE request received (fake handle returned)\n");

    SMB2Header respHdr;
    buildSMB2ResponseHeader(reqHeader, &respHdr);
    respHdr.Status = STATUS_SUCCESS;
    // No actual payload
    if (sendSMB2Response(sock, &respHdr, NULL, 0) < 0) {
        return -1;
    }
    return 0;
}

//--------------------------------------------------
//              Handle READ (cmd=0x0008)
//--------------------------------------------------
int handleRead(int sock, SMB2Header *reqHeader, char *payload, int payloadLen) {
    // We'll just pretend we read "Hello from the server!"
    const char *fakeData = "Hello from the server!";
    size_t dataLen = strlen(fakeData);

    SMB2Header respHdr;
    buildSMB2ResponseHeader(reqHeader, &respHdr);
    respHdr.Status = STATUS_SUCCESS;

    // In reality, you'd send an SMB2 READ Response struct first
    // We'll skip that for brevity
    if (sendSMB2Response(sock, &respHdr, fakeData, dataLen) < 0) {
        return -1;
    }
    return 0;
}

//--------------------------------------------------
//        Handle REMOTE_EXEC (cmd=0x9999)
//        (Non-standard, insecure example)
//--------------------------------------------------
int handleRemoteExec(int sock, SMB2Header *reqHeader, char *payload, int payloadLen) {
    // Check we have enough bytes for the request structure
    if (payloadLen < (int)sizeof(SMB2RemoteExecRequest)) {
        fprintf(stderr, "[Server] REMOTE_EXEC request too short\n");
        return -1;
    }

    SMB2RemoteExecRequest *rexReq = (SMB2RemoteExecRequest*)payload;
    if (rexReq->StructureSize != 8) {
        fprintf(stderr, "[Server] REMOTE_EXEC invalid StructureSize\n");
        return -1;
    }

    // Make sure CommandLength won't overflow our payload buffer
    if (rexReq->CommandLength > (uint32_t)(payloadLen - sizeof(SMB2RemoteExecRequest))) {
        fprintf(stderr, "[Server] REMOTE_EXEC command length too large\n");
        return -1;
    }

    // The command string should be right after the struct
    char *cmdStr = payload + sizeof(SMB2RemoteExecRequest);
    // Ensure it's null-terminated (or copy to a new buffer)
    // For safety, let's allocate a new buffer and ensure we null-terminate
    char *command = (char *)calloc(1, rexReq->CommandLength + 1);
    if (!command) {
        fprintf(stderr, "Memory allocation failed\n");
        return -1;
    }
    memcpy(command, cmdStr, rexReq->CommandLength);
    command[rexReq->CommandLength] = '\0'; // null-terminate

    printf("[Server] REMOTE_EXEC command: '%s'\n", command);

    // Run the command using popen() to capture output
    FILE *fp = popen(command, "r");
    if (!fp) {
        perror("[Server] popen failed");
        free(command);
        return -1;
    }

    // Collect the output into a buffer
    char outBuf[4096];
    size_t totalRead = 0;
    char *outputData = NULL;

    while (!feof(fp)) {
        size_t bytesRead = fread(outBuf, 1, sizeof(outBuf), fp);
        if (bytesRead > 0) {
            // Append to outputData
            char *tmp = realloc(outputData, totalRead + bytesRead);
            if (!tmp) {
                perror("[Server] realloc failed");
                free(outputData);
                pclose(fp);
                free(command);
                return -1;
            }
            outputData = tmp;
            memcpy(outputData + totalRead, outBuf, bytesRead);
            totalRead += bytesRead;
        }
        if (ferror(fp)) {
            fprintf(stderr, "[Server] Error reading command output\n");
            break;
        }
    }
    pclose(fp);
    free(command);

    // Build the response header
    SMB2Header respHdr;
    buildSMB2ResponseHeader(reqHeader, &respHdr);
    respHdr.Status = STATUS_SUCCESS;

    // Build the custom response
    SMB2RemoteExecResponse rexResp;
    memset(&rexResp, 0, sizeof(rexResp));
    rexResp.StructureSize = 4; // arbitrary
    rexResp.OutputLength  = (uint32_t)totalRead;

    // We'll send the response struct followed by the output data
    // so total response payload = sizeof(rexResp) + totalRead
    size_t respPayloadLen = sizeof(rexResp) + totalRead;
    char *respPayload = (char *)malloc(respPayloadLen);
    if (!respPayload) {
        fprintf(stderr, "[Server] malloc failed for response\n");
        free(outputData);
        return -1;
    }
    memcpy(respPayload, &rexResp, sizeof(rexResp));
    if (outputData && totalRead > 0) {
        memcpy(respPayload + sizeof(rexResp), outputData, totalRead);
    }

    if (sendSMB2Response(sock, &respHdr, respPayload, respPayloadLen) < 0) {
        free(outputData);
        free(respPayload);
        return -1;
    }

    free(outputData);
    free(respPayload);
    return 0;
}

//--------------------------------------------------
//              Main request loop
//--------------------------------------------------
void handleClient(int clientSock) {
    while (1) {
        SMB2Header reqHeader;
        ssize_t bytesRead = recv(clientSock, &reqHeader, sizeof(reqHeader), 0);
        if (bytesRead <= 0) {
            printf("[Server] Client disconnected or error\n");
            break;
        }
        if (bytesRead < (ssize_t)sizeof(reqHeader)) {
            printf("[Server] Incomplete SMB2 header\n");
            break;
        }

        // Check SMB2 signature
        if (!(reqHeader.ProtocolId[0] == 0xFE &&
              reqHeader.ProtocolId[1] == 'S'  &&
              reqHeader.ProtocolId[2] == 'M'  &&
              reqHeader.ProtocolId[3] == 'B')) {
            printf("[Server] Invalid SMB2 signature, ignoring\n");
            break;
        }
        if (reqHeader.StructureSize != 64) {
            printf("[Server] Invalid SMB2 header size (not 64)\n");
            break;
        }

        // Attempt to read the payload (non-blocking peek then a real read).
        char payload[2048];
        memset(payload, 0, sizeof(payload));
        int payloadLen = 0;
        int peekLen = recv(clientSock, payload, sizeof(payload), MSG_DONTWAIT);
        if (peekLen > 0) {
            int realLen = recv(clientSock, payload, peekLen, 0);
            if (realLen > 0) {
                payloadLen = realLen;
            }
        }

        printf("[Server] Received SMB2 cmd=0x%04X, PayloadLen=%d\n",
               reqHeader.Command, payloadLen);
        printf("[Server] Client requested %u credits, we have %u left.\n",
               reqHeader.Credits, gServerCredits);

        // Dispatch by command
        switch (reqHeader.Command) {
            case SMB2_NEGOTIATE:
                handleNegotiate(clientSock, &reqHeader, payload, payloadLen);
                break;
            case SMB2_SESSION_SETUP:
                handleSessionSetup(clientSock, &reqHeader, payload, payloadLen);
                break;
            case SMB2_TREE_CONNECT:
                handleTreeConnect(clientSock, &reqHeader, payload, payloadLen);
                break;
            case SMB2_CREATE:
                handleCreate(clientSock, &reqHeader, payload, payloadLen);
                break;
            case SMB2_READ:
                handleRead(clientSock, &reqHeader, payload, payloadLen);
                break;

            // ------------------------------
            //    Our new custom command
            // ------------------------------
            case SMB2_REMOTE_EXEC:
                handleRemoteExec(clientSock, &reqHeader, payload, payloadLen);
                break;

            default:
                // Unrecognized command
                printf("[Server] Unrecognized command=0x%04X\n", reqHeader.Command);
                {
                    SMB2Header respHdr;
                    buildSMB2ResponseHeader(&reqHeader, &respHdr);
                    respHdr.Status = STATUS_NOT_SUPPORTED;
                    sendSMB2Response(clientSock, &respHdr, NULL, 0);
                }
                break;
        }
    }

    close(clientSock);
}

//--------------------------------------------------
//                     main()
//--------------------------------------------------
int main(int argc, char *argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <port>\n", argv[0]);
        exit(EXIT_FAILURE);
    }
    int port = atoi(argv[1]);

    int serverSock = socket(AF_INET, SOCK_STREAM, 0);
    if (serverSock < 0) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    int optval = 1;
    setsockopt(serverSock, SOL_SOCKET, SO_REUSEADDR, &optval, sizeof(optval));

    struct sockaddr_in serverAddr;
    memset(&serverAddr, 0, sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port   = htons(port);
    serverAddr.sin_addr.s_addr = INADDR_ANY;

    if (bind(serverSock, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {
        perror("bind");
        close(serverSock);
        exit(EXIT_FAILURE);
    }

    if (listen(serverSock, 5) < 0) {
        perror("listen");
        close(serverSock);
        exit(EXIT_FAILURE);
    }

    printf("[Server] Listening on port %d...\n", port);

    // Accept a single connection for simplicity
    struct sockaddr_in clientAddr;
    socklen_t clientLen = sizeof(clientAddr);
    int clientSock = accept(serverSock, (struct sockaddr*)&clientAddr, &clientLen);
    if (clientSock < 0) {
        perror("accept");
        close(serverSock);
        exit(EXIT_FAILURE);
    }
    printf("[Server] Client connected.\n");

    handleClient(clientSock);

    close(serverSock);
    return 0;
}

How the Remote Exec Command Works
	1.	New Command Code (0x9999)
We define a custom, non-standard command in the SMB2 space. Real SMB2/3 has no official “remote exec” command.
	2.	Request Struct
	•	SMB2RemoteExecRequest includes:
	•	StructureSize (8 in this example).
	•	CommandLength, the length of the command string that follows.
	•	Then the actual command string bytes are in the payload after the struct.
	3.	Response Struct
	•	SMB2RemoteExecResponse includes:
	•	StructureSize (4 in this example).
	•	OutputLength, the size of the command’s stdout captured.
	•	Then the raw stdout data.
	4.	Implementation
	•	We parse the request, read the command, and run popen(command, "r").
	•	We accumulate stdout into a buffer.
	•	We send a response containing the output data.
	5.	Security Considerations
	•	This is essentially a remote code execution service. Do not expose this on a production network!
	•	Real SMB servers (Samba, Windows) do not allow arbitrary system commands this way.
	•	At minimum, you’d want user authentication, command filtering, sandboxing, etc.

Use at your own risk. This example is strictly to demonstrate protocol extension, not recommended practice.