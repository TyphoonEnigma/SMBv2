Short answer: **No.** While EternalBlue **did** exploit SMBv1 (specifically the “trans2” sub-protocol) to gain remote code execution, it **did not** rely on a named pipe handle to trigger the vulnerability. Some of the other Equation Group–leaked exploits—such as EternalRomance—**did** use a named pipe (e.g., `\pipe\SRVSVC`) to escalate privileges or achieve code execution, but EternalBlue’s path to RCE primarily involved crafting malicious SMB “trans2” (transaction) requests rather than pipe-based requests.

---

## A Bit More Detail

1. **The Vulnerability (MS17-010)**
   - EternalBlue exploited a memory corruption bug in Microsoft’s SMBv1 server (in functions like `Srv!SrvOs2FeaListToNt` or `Srv!SrvTransaction2Dispatch`).
   - By sending specially crafted “trans2” (transaction) packets, the attacker could write arbitrary data past buffer boundaries in kernel space (in particular, in the `SRV` driver).

2. **Named Pipe vs. Trans2**
   - **Named Pipe Exploits (e.g., EternalRomance):** Some SMB exploits from the same leak abused a named pipe—often `\pipe\SRVSVC`—to hold open a file/pipe handle in the SMB server and then manipulate buffer offsets for code execution.
   - **EternalBlue’s Approach:** EternalBlue directly abused an out-of-bounds write in the SMBv1 “trans2” sub-protocol. While SMBv1 does support named pipes, EternalBlue’s trigger was not contingent on obtaining a pipe handle.

3. **Why the Confusion?**
   - All these exploits came from the same toolset (Equation Group’s FuzzBunch) and target SMB on various Windows versions.
   - EternalBlue, EternalRomance, EternalChampion, and EternalSynergy each had different code paths and slightly different vulnerabilities, even though they were all SMB-related.

---

### Summary

- **EternalBlue** = Exploits a buffer overflow in SMBv1’s “trans2” commands.  
- **Does it use a pipe?** No—unlike some sibling exploits (e.g., EternalRomance), it does **not** hinge on a named pipe handle.

If you are researching the specific mechanics, focus on how EternalBlue constructs its transaction (trans2) requests and how it achieves an out-of-bounds write in the Windows kernel’s SRV driver without going through a pipe.